#!/bin/bash

sudo apt update -qq
sudo apt install -y -qq jq curl

export MAIN_DIR=$(pwd)
echo -e 'Obteniendo datos de versiones de Forge...'
JSON_DATA=$(curl -sSL https://files.minecraftforge.net/maven/net/minecraftforge/forge/promotions_slim.json)
FILE_SITE=https://maven.minecraftforge.net/net/minecraftforge/forge/
echo $MAIN_DIR

cd ..
rm ./startJavaServer
wget https://raw.githubusercontent.com/lordofwizard/mcserver/main/startJavaServer
chmod +x ./startJavaServer
mkdir -p server
cd server

# Mostrar todas las versiones disponibles
echo -e '\nVersiones disponibles:'
echo $(echo -e ${JSON_DATA} | jq -r '.promos | to_entries[] | .key' | sort -t. -k2,2n -k3,3n -k4,4n)

echo -e '\nPor favor visita https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json para comprobar las versiones disponibles y elige en consecuencia'
# MC_VERSION : BUILD_TYPE: https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json
echo -e "\n> Introduce el tipo de compilación de Forge (por defecto 1):"
echo -e "Escribe [1] recomendado"
echo -e "Escribe [2] última"
read BUILD_TYPE

# si no se especifica el tipo de compilación, usar recomendado
[[ -z $BUILD_TYPE ]] && BUILD_TYPE=1

if [[ $BUILD_TYPE -eq 1 ]]; then
    BUILD_TYPE=recommended

elif [[ $BUILD_TYPE -eq 2 ]]; then
    BUILD_TYPE=latest

else
    echo -e "Por favor, introduce el número apropiado"
    cd "$MAIN_DIR"
    ./ForgeInstall
    exit
fi

echo -e "Has elegido $BUILD_TYPE"

echo -e "\n> Introduce la versión de Minecraft: "
read MC_VERSION

if [ -z $MC_VERSION ] || [ "$MC_VERSION" == "latest" ]; then
    MC_VERSION=$(echo -e ${JSON_DATA} | jq -r '.promos | to_entries[] | .key | select(contains("latest")) | split("-")[0]' | sort -t. -k2,2n -k3,3n -k4,4n | tail -1)
fi

if [ ! -z $FORGE_VERSION ]; then
    DOWNLOAD_LINK=https://maven.minecraftforge.net/net/minecraftforge/forge/${FORGE_VERSION}-${BUILD_TYPE}/forge-${FORGE_VERSION}
    FORGE_JAR=forge-${FORGE_VERSION}*.jar

else

    echo -e "\nVersión de Minecraft: ${MC_VERSION}"
    echo -e "Tipo de compilación: ${BUILD_TYPE}\n"

    ## algunas variables para obtener versiones y cosas
    VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION "${MC_VERSION}" --arg BUILD_TYPE "${BUILD_TYPE}" '.promos | to_entries[] | .key | select(contains($BUILD_TYPE)) | select(contains($MC_VERSION))' | head -1)
    echo $VERSION_KEY

    ## localizando la versión de forge
    if [ "${VERSION_KEY}" == "" ] && [ "${BUILD_TYPE}" == "latest" ]; then
        echo -e "Cambiando a última desde recomendado debido a que no hay una versión recomendada de forge para la versión de Minecraft solicitada."
        VERSION_KEY=$(echo -e ${JSON_DATA} | jq -r --arg MC_VERSION "${MC_VERSION}" '.promos | to_entries[] | .key | select(contains($MC_VERSION)) | select(contains("latest"))' | head -1)
    fi

    ## Error si la versión de Minecraft no es válida.
    if [ "${VERSION_KEY}" == "" ] || [ "${VERSION_KEY}" == "null" ]; then
        echo -e "La instalación falló porque no hay una versión válida de forge para la versión de Minecraft seleccionada."
        exit 1
    fi

    FORGE_VERSION=$(echo -e ${JSON_DATA} | jq -r --arg VERSION_KEY "$VERSION_KEY" '.promos | .[$VERSION_KEY]')

    if [ "${MC_VERSION}" == "1.7.10" ] || [ "${MC_VERSION}" == "1.8.9" ]; then
        DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}/forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}
    
    else
        DOWNLOAD_LINK=${FILE_SITE}${MC_VERSION}-${FORGE_VERSION}/forge-${MC_VERSION}-${FORGE_VERSION}
    
    fi
fi

echo -e "Descargando la versión de forge ${FORGE_VERSION}"
echo -e "El enlace de descarga es ${DOWNLOAD_LINK}"
if [ ! -z "${DOWNLOAD_LINK}" ]; then 
    if curl --output /dev/null --silent --head --fail ${DOWNLOAD_LINK}-installer.jar; then
        echo -e "El enlace de descarga del instalador es válido."
    else
        echo -e "El enlace es inválido, cerrando"
        exit 2
    fi
else
    echo -e "No hay enlace de descarga, cerrando"
    exit 3
fi

curl -s -o installer.jar -sS ${DOWNLOAD_LINK}-installer.jar

# Comprobando si los archivos jar descargados existen
if [ ! -f ./installer.jar ]; then
    echo "!!! Error al descargar la versión de forge ${FORGE_VERSION} !!!"
    exit
fi

# Instalando el servidor
echo -e "Instalando el servidor de forge.\n"
java -jar installer.jar --installServer || { echo -e "La instalación falló"; exit 4; }

# Eliminando el archivo installer.jar
echo -e "Eliminando el archivo installer.jar.\n"
rm -rf installer.jar

# creando el archivo de lanzamiento
cd $MAIN_DIR/../server
echo "eula=true" > eula.txt     # aceptando el eula
FORGE_RUN_FILE=./run.sh
if [ -f "$FORGE_RUN_FILE" ]; then
    echo "#!/bin/bash
export JAVA=../bin/java_bins/bin/java

\$JAVA @user_jvm_args.txt @libraries/net/minecraftforge/forge/${MC_VERSION}-${FORGE_VERSION}/unix_args.txt \"\$@\"" > run.sh
    chmod +x ./run.sh

    echo '#!/bin/bash
cd server
./run.sh -nogui' > ../startJavaServer
    chmod +x ../startJavaServer

else
    # 1.7.10 gracias a Optifinel3ss#9059
    if [ "$MC_VERSION" == "1.8.9" ] || [ "$MC_VERSION" == "1.7.10" ]; then
        FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}-${MC_VERSION}-universal.jar
    else
        FORGE_JAR=forge-${MC_VERSION}-${FORGE_VERSION}.jar
    fi
    SERVER_JARFILE=server.jar
    mv $FORGE_JAR $SERVER_JARFILE

fi
